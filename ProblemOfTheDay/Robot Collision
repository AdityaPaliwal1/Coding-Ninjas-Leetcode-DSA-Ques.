class Solution {
public:
    vector<int> survivedRobotsHealths(vector<int>& positions, vector<int>& healths, string directions) {
        int n = positions.size();
        vector<int> ids;
        for (int i = 0; i < n; i++) {
            ids.push_back(i);
        }

        auto compare = [&](int ids1, int ids2) {
            return positions[ids1] < positions[ids2];
        };

        sort(ids.begin(), ids.end(), compare);

        stack<int> stack;
        for (auto it : ids) {
            if (directions[it] == 'R') {
                stack.push(it);
            } else {
                while (!stack.empty() && healths[it] > 0) {
                    if (healths[it] > healths[stack.top()]) {
                        healths[it]--;
                        healths[stack.top()]=0;
                        if (healths[stack.top()] == 0) {
                            stack.pop();
                        }
                    } else if (healths[it] < healths[stack.top()]) {
                        healths[stack.top()]--;
                        healths[it] = 0;
                    } else {
                        healths[it] = 0;
                        healths[stack.top()] = 0;
                        stack.pop();
                    }
                }
            }
        }

        vector<int> ans;
        for (int i = 0; i < n; i++) {
            if (healths[i] > 0) {
                ans.push_back(healths[i]);
            }
        }
        return ans;
    }
};
