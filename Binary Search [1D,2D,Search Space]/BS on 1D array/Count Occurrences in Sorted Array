class Solution{
    private:
    int FirstOccurrence(int arr[] , int n , int x){
        int left = 0;
        int right = n-1;
        int first = -1;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            
            if(arr[mid] == x){
                first = mid;
                right = mid -1;
            }
            else if( arr[mid] < x){
                left = mid + 1;
            }
            else{
                right = mid -1;
            }
        }
        return first;
    }
    
     int LastOccurrence(int arr[] , int n , int x){
        int left = 0;
        int right = n-1;
        int Last = -1;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            
            if(arr[mid] == x){
                Last = mid;
                left = mid + 1;
            }
            else if( arr[mid] < x){
                left = mid + 1;
            }
            else{
                right = mid - 1;
            }
        }
        return Last;
    }
    
    
    pair<int, int> firstAndLastPosition(int arr[], int n, int k) {
    int first = FirstOccurrence(arr, n, k);
    if (first == -1) return { -1, -1};
    int last = LastOccurrence(arr, n, k);
    return {first, last};
}
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int count(int arr[], int n, int x) {
	    // code here
	pair<int, int> ans = firstAndLastPosition(arr, n, x);
    if (ans.first == -1) return 0;
    return (ans.second - ans.first + 1);
	}
};
