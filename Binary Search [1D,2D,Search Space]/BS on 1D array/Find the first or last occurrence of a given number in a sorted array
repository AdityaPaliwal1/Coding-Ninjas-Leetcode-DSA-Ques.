class Solution {
    private: 
     int findFirst(vector<int>& nums, int target) {
            int left = 0, right = nums.size() - 1;
            while (left <= right) {
                int mid = left + (right - left) / 2;
                if (nums[mid] >= target) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
            return (left < nums.size() && nums[left] == target) ? left : -1;
        }

            int findLast(vector<int>& nums, int target) {
            int left = 0, right = nums.size() - 1;
            while (left <= right) {
                int mid = left + (right - left) / 2;
                if (nums[mid] <= target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
            return (right >= 0 && nums[right] == target) ? right : -1;
        }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res(2 ,-1);

        res[0] = findFirst(nums, target);
        res[1] = findLast(nums, target);

          return res;
    }
};
