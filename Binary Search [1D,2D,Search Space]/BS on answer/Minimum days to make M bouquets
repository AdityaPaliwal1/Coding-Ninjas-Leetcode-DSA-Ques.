class Solution {
    bool possible(vector<int>& bloomDay, int days , int m , int k){
        int n = bloomDay.size();
        int cnt =0;
        int nofB=0;
        for(int i =0 ; i<n ; i++){
            if(bloomDay[i] <= days){
                cnt ++;
            }
            else {
                nofB += (cnt / k);
                cnt = 0;
            }
        }
        nofB += (cnt / k);
        return nofB >= m;
    }
public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        int n = bloomDay.size();
        long long  value = m *1LL * k * 1LL;
        if(value > n) return -1;

        int mini = INT_MAX , maxi = INT_MIN;
        for(int i =0 ; i<n ; i++){
            mini = min(bloomDay[i], mini);
            maxi = max(bloomDay[i], maxi);
        }
        int low = mini , high = maxi ;
        while (low <= high){
            int mid = (low + high )/ 2;
            if(possible(bloomDay,mid,m,k)){
                high = mid -1;
            }
            else{
                low = mid + 1;
            }
        }
        return low ; 
    }
};
